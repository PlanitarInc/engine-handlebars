'use strict';

/**
 * Module dependencies.
 */

var fs = require('fs');
var utils = require('engine-utils');


/**
 * Requires cache.
 */

var requires = {};

/**
 * Handlebars support.
 */

var engine = module.exports = utils.fromStringRenderer('handlebars');

/**
 * Handlebars string support. Render the given `str` and invoke the callback `cb(err, str)`.
 *
 * ```js
 * var engine = require('engine-handlebars');
 * engine.render('{{name}}', {name: 'Jon'}, function (err, content) {
 *   console.log(content); //=> 'Jon'
 * });
 * ```
 *
 * @param {String} `str`
 * @param {Object|Function} `options` or callback.
 *     @property {Object} `cache` enable template caching
 *     @property {String} `filename` filename required for caching
 * @param {Function} `cb` callback function.
 * @api public
 */

engine.render = function render(str, options, cb) {
  var handlebars = requires.handlebars || (requires.handlebars = require('handlebars'));
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  var opts = options || {};

  // cache requires .filename
  if (opts.cache && !opts.filename) {
    return cb(new Error('the "filename" option is required for caching'));
  }

  try {
    for (var partial in opts.partials) {
      handlebars.registerPartial(partial, opts.partials[partial]);
    }
    for (var helper in opts.helpers) {
      handlebars.registerHelper(helper, opts.helpers[helper]);
    }

    cb(null,  handlebars.compile(str)(opts), '.html');
  } catch (err) {
    cb(err);
    return;
  }
};


/**
 * Synchronously render Handlebars or templates.
 *
 * ```js
 * var engine = require('engine-handlebars');
 * engine.renderSync('<%= name %>', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 * @param  {Object} `str` The string to render.
 * @param  {Object} `options` Object of options.
 *   @option {Object} `settings` Settings to pass to Lo-Dash.
 *   @option {Object} `delims` Template delimiters, generated by [delims]
 *   @option {Object} `imports` Template helpers to pass to Lo-Dash.
 * @return {String} Rendered string.
 * @api public
 */

engine.renderSync = function renderSync(str, options) {
  var handlebars = requires.handlebars || (requires.handlebars = require('handlebars'));
  var opts = options || {};

  try {
    return handlebars.compile(str)(opts);
  } catch (err) {
    return err;
  }
};


/**
 * Handlebars file support. Render a file at the given `path` and callback `cb(err, str)`.
 *
 * ```js
 * var engine = require('engine-handlebars');
 * engine.renderSync('foo/bar/baz.tmpl', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 *
 * @param {String} `path`
 * @param {Object|Function} `options` or callback function.
 * @param {Function} `cb` callback function
 * @api public
 */

engine.renderFile = function renderFile(path, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  var opts = options || {};
  try {
    engine.render(fs.readFileSync(path, 'utf8'), opts, cb);
  } catch (err) {
    cb(err);
    return;
  }
};

/**
 * Express support.
 */

engine.__express = engine.renderFile;
